name: Build Windows

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 45

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Force expose python3.10 & set build env vars
      shell: pwsh
      run: |
        Write-Host "Python at $env:pythonLocation\python.exe"
        & $env:pythonLocation\python.exe --version
        # actions/setup-python places the interpreter in pythonLocation; set env vars
        Add-Content -Path $env:GITHUB_ENV -Value "BUNDLED_PYTHON_310=$($env:pythonLocation)\python.exe"
        Add-Content -Path $env:GITHUB_ENV -Value "RETINAFACE_PYTHON=$($env:pythonLocation)\python.exe"
        Add-Content -Path $env:GITHUB_ENV -Value "PYTHON_FOR_RETINAFACE=$($env:pythonLocation)\python.exe"

    - name: Install Node dependencies
      run: npm install

    - name: Install ImageMagick
      run: choco install imagemagick -y
      
    - name: Generate square PNG and ICO
      shell: bash
      run: |
        # Find the largest available PNG icon
        for size in 1024 512 256 128; do
          if [ -f "resources/icons/${size}x${size}.png" ]; then
            SOURCE_PNG="resources/icons/${size}x${size}.png"
            echo "Using $SOURCE_PNG as source"
            break
          fi
        done
        
        if [ -z "$SOURCE_PNG" ]; then
          echo "Error: No PNG icon found"
          exit 1
        fi
        
        # Create a perfectly square 256x256 PNG using ImageMagick with proper scaling
        echo "Creating square 256x256 PNG from $SOURCE_PNG"
        magick "$SOURCE_PNG" -resize 256x256 -gravity center -extent 256x256 -background transparent resources/icons/square-256.png
        
        # Generate ICO from the square PNG
        echo "Generating ICO from square PNG"
        npx --yes png-to-ico resources/icons/square-256.png > resources/icon.ico
        
        # Verify ICO was created
        if [ ! -f "resources/icon.ico" ]; then
          echo "Error: Failed to create icon.ico"
          exit 1
        fi
        echo "Successfully created resources/icon.ico"
    # Python bundling steps removed - no Python backend needed

    - name: Build React app
      shell: pwsh
      run: |
        npx craco --version || echo "craco version check failed"
        # Set NODE_OPTIONS for legacy OpenSSL support and run React build
        $env:NODE_OPTIONS = "--openssl-legacy-provider"
        $env:CI = "false"
        $env:GENERATE_SOURCEMAP = "false"
        npx craco build
      env:
        CI: false
        GENERATE_SOURCEMAP: false

    - name: Generate installer assets
      run: |
        node resources/generate-installer-assets.js
      shell: pwsh

    - name: Build Electron main process
      run: |
        npx tsc -p tsconfig.electronMain.json
        npx electron-builder --win --x64 --publish=never
      env:
        ELECTRON_BUILDER_CACHE: ${{ runner.temp }}\electron-builder-cache
        PYTHON: python

    - name: List build artifacts
      run: dir dist\ || echo "No dist directory"
      shell: cmd

    - name: Test silent installation with console output
      shell: pwsh
      run: |
        Write-Host "Testing silent installation with console output..."
        $installer = Get-ChildItem -Path "dist" -Filter "*.exe" | Select-Object -First 1
        if ($installer) {
          Write-Host "Found installer: $($installer.FullName)"
          Write-Host "Running silent installation test..."
          
          # Create test installation directory
          $testDir = "$env:TEMP\TinyExplorerTest"
          New-Item -ItemType Directory -Force -Path $testDir | Out-Null
          
          # Run installer in silent mode with console output
          # Note: We're not actually installing, just testing that the installer runs
          Write-Host "Testing installer console output (dry run)..."
          Start-Process -FilePath $installer.FullName -ArgumentList "/S", "/D=$testDir", "/?", "/NCRC" -Wait -NoNewWindow -PassThru | Out-Host
          
          Write-Host "Console output test completed"
        } else {
          Write-Host "No installer found in dist directory"
        }

    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: |
          dist/*.exe
        if-no-files-found: warn